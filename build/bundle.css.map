{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Map.svelte",
    "../../Slider.svelte",
    "../../Total.svelte",
    "../../Table.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Map from \"./Map.svelte\";\n  import Table from \"./Table.svelte\";\n  import Total from \"./Total.svelte\";\n  import Slider from \"./Slider.svelte\";\n  import data from \"./data\";\n</script>\n\n<style>\n\t:global(body, html) {\n\t\t/* this will apply to <body> */\n\t\theight:100%;\n\t}\n\n  :global(*) {\n    font-family: 'Roboto', sans-serif;\n  }\n\n  .grid-container {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 0fr 0fr 0fr 0fr 1fr 2.7em;\n    grid-template-areas: \"header\" \"map\" \"total\" \"slider\" \"table\" \"footer\";\n\t\theight:100%;\n  }\n\n\n  h1, span {\n    grid-area: header;\n    text-align:center;\n    margin:0;\n    padding:0.5em;\n    background: #b99a9a;\n    color: white;\n    font-size:1.5em;\n  }\n  span {\n    font-size: 0.8em;\n    width:100%;\n    box-sizing: border-box;\n    background: #eee;\n    color: #AAA;\n    display: inline-block;\n  }\n\n  a {\n    color: #999;\n    text-decoration: underline;\n  }\n\n  .slider {\n    grid-area: slider;\n  }\n\n  .total {\n    grid-area: total;\n  }\n\n  .map {\n    grid-area: map;\n\t\tbackground: #eee;\n  }\n\n  .table {\n    grid-area: table;\n    overflow: scroll;\n    min-height:8em;\n  }\n\n  footer {\n    grid-area: footer;\n\t\toverflow: scroll;\n  }\n</style>\n\n<svelte:head>\n  <link href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\" rel=\"stylesheet\">\n</svelte:head>\n\n{#await data.fetch() then data}\n<main class=\"grid-container\">\n  <h1 class=\"header\">Confirmed COVID-19 Cases over time</h1>\n  <div class=\"map\">\n    <Map body=\"{data.body}\" countryCodes=\"{data.countryCodes}\" />\n  </div>\n  <div class=\"total\">\n    <Total body=\"{data.body}\"/>\n  </div>\n  <div class=\"slider\">\n    <Slider dates=\"{data.dates}\"/>\n  </div>\n  <div class=\"table\">\n    <Table class=\"table\" body=\"{data.body}\" countryCodes=\"{data.countryCodes}\"  />\n  </div>\n  <footer>\n    <span>Data source: <a href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a> | Made By: <a href=\"http://www.pixelscript.net/\">pixelscript</a> | Source: <a href=\"https://github.com/pixelscript/covid-19-map\">https://github.com/pixelscript/covid-19-map</a></span>\n  </footer>\n</main>\n{/await}",
    "<script>\n  import { draw } from 'svelte/transition';\n  import { flip } from 'svelte/animate';\n  import _ from 'lodash';\n  import { selectedCountryCode, selectedDateIndex } from './main.store';\n  import world from \"./world-mill.json\";\n\n  export let body = [];\n  export let countryCodes = [];\n\n  const paths = world.paths;\n  let countries;\n  $: if (body.length && countryCodes.length && !isNaN($selectedDateIndex)) {\n    countries= [];\n    Object.keys(paths).forEach((code)=>{\n      const d =  _.find(body, {code});\n      const total = d ? d.data[$selectedDateIndex].value : 0;\n      const log = d ? d.data[$selectedDateIndex].log : 0;\n      const hasData = d ? true : false;\n      countries.push({\n        code,\n        path: paths[code].path,\n        name: paths[code].name,\n        color: logToCol(total,log),\n        hasData,\n        total\n      })\n    });\n    countries = countries;\n  }\n\n  function logToCol(total,log){\n    if(!total) {\n      return \"hsl(10,0%,70%)\";\n    }\n    return \"hsl(10,\"+ log +\"%,60%)\";\n  }\n</script>\n\n<style>\n  figure {\n    margin: 0 0 1em 0;\n    text-align: center;\n    margin: 0 auto;\n    max-height:100%;\n    max-width:1400px;\n  }\n\n  svg {\n    width: 100%;\n    margin: 0 0 1em 0;\n  }\n  path {\n    /* cursor: pointer; */\n  }\n  figure {\n    padding: 10px;\n    box-sizing: border-box;\n  }\n</style>\n\n<figure>\n  <svg\n    version=\"1.1\"\n    id=\"Layer_1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    x=\"0px\"\n    y=\"0px\"\n    viewBox=\"0 0 {world.width}\n    {world.height}\"\n    enable-background=\"new 0 0 {world.width}\n    {world.height}\"\n    xml:space=\"preserve\">\n    <g>\n      {#each countries as country}\n        <path\n          style=\"cursor: {country.hasData ? 'pointer' : 'normal'}; fill:{country.color}; stroke:hsl(100,25%,16%); stroke-width: {country.code == $selectedCountryCode ? 1 : 0}; paint-order: fill;\"\n          d={country.path}\n          on:mouseover={() => {\n            if(country.hasData) {\n              selectedCountryCode.set(country.code);\n            }\n          }}\n          on:mouseout={() => {\n            if(country.hasData) {\n              selectedCountryCode.set('');\n            }\n          }}\n        />\n      {/each}\n    </g>\n  </svg>\n</figure>",
    "<script>\n  import { selectedDateIndex } from \"./main.store\";\n  export let dates = [\"NO DATA\"];\n  $: date = dates[$selectedDateIndex];\n  let intVal;\n  const play = () => {\n    selectedDateIndex.set(0);\n    intVal = setInterval(() => {\n      if ($selectedDateIndex + 1 < dates.length) {\n        selectedDateIndex.set($selectedDateIndex + 1);\n      } else {\n        clearInterval(intVal);\n      }\n    }, 250);\n  };\n</script>\n\n<style>\n  input {\n    width: 100%;\n    vertical-align: middle;\n  }\n  p {\n    text-align: center;\n    margin-top: -2em;\n    font-size: 2em;\n    margin-bottom: 1em;\n  }\n\n  button,\n  input {\n    vertical-align: middle;\n    display: inline-block;\n    height: 2.5em;\n  }\n\n  .grid-container {\n    display: grid;\n    grid-template-columns: 0fr 1fr;\n    grid-template-rows: 1fr;\n    grid-template-areas: \"button slider\";\n    gap: 1em;\n  }\n\n  .button {\n    grid-area: button;\n    padding: 0.5em;\n  }\n\n  .slider {\n    grid-area: slider;\n    padding: 0.5em;\n  }\n</style>\n\n<p>{date}</p>\n<section class=\"grid-container\">\n  <button\n    type=\"button\"\n    on:click={() => {\n      play();\n    }}\n    class=\"button\">\n    PLAY\n  </button>\n  <input\n    class=\"slider\"\n    type=\"range\"\n    min=\"0\"\n    max={dates.length - 1}\n    bind:value={$selectedDateIndex} />\n</section>\n",
    "<script>\n  import { selectedDateIndex } from \"./main.store\";\n  export let body;\n  let total;\n  $: total = calcTotal($selectedDateIndex);\n  const calcTotal = () => {\n    let total = 0;\n    body.forEach(country => {\n      total += country.data[$selectedDateIndex].value;\n    });\n    return total.toLocaleString();\n  };\n</script>\n\n<style>\n  .total {\n    border: 1px solid #aaa;\n    display: block;\n    text-align: center;\n    padding: 0.5em;\n    margin-top: -4.5em;\n    font-size: 2em;\n    margin-left: 1em;\n    height: 2.5em;\n    width: 4em;\n    background: rgba(185, 174, 174, 0.5);\n    line-height: 3em;\n    color:#333;\n  }\n  .title {\n    font-size: 0.5em;\n    line-height: 0.5em;\n    text-decoration: underline;\n  }\n  .value {\n    font-size: 1em;\n    line-height: 2.5em;\n  }\n</style>\n\n<span class=\"total\">\n  <div class=\"title\">Total</div>\n  <div class=\"value\">{total}</div>\n</span>\n",
    "<script>\n  import { selectedCountryCode, selectedDateIndex } from \"./main.store\";\n  import { afterUpdate } from 'svelte';\n  export let body;\n  let tBody;\n  let over = false;\n  afterUpdate(() => {\n    const selected = tBody.querySelector(\".selected\");\n    if(selected && !over) {\n      selected.scrollIntoView(false);\n    }\n  });\n</script>\n\n<style>\n  table {\n    width: 100%;\n    max-height: 100%;\n  }\n  th {\n    background: white;\n    position: sticky;\n    top: 0;\n    box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.4);\n  }\n  table tr th {\n    background: #52657c;\n    color: white;\n    text-align: left;\n  }\n  table tr td {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  table tr:nth-child(odd) {\n    background-color: rgba(171, 206, 227, 0.3);\n  }\n  table tr:hover {\n    background-color: #abcee3;\n  }\n\n  table tr.selected {\n    background-color: #abcee3;\n  }\n  table th,\n  table td {\n    padding: 0.5rem;\n  }\n</style>\n<table on:mouseover=\"{()=> over = true}\" on:mouseleave=\"{()=> over = false}\">\n  <thead>\n    <tr>\n      <th>Country/Region</th>\n      <th>Number of confirmed cases</th>\n    </tr>\n  </thead>\n  <tbody bind:this={tBody}>\n    {#each body as row}\n      <tr\n        class={row.code === $selectedCountryCode ? 'selected' : ''}\n        on:mouseover={() => {\n          selectedCountryCode.set(row.code);\n        }}>\n        <td>{row.country} ({row.code})</td>\n        <td>{row.data[$selectedDateIndex].value.toLocaleString()}</td>\n      </tr>\n    {/each}\n  </tbody>\n</table>\n"
  ],
  "names": [],
  "mappings": "AASS,UAAU,AAAE,CAAC,AAEpB,OAAO,IAAI,AACZ,CAAC,AAEQ,CAAC,AAAE,CAAC,AACV,WAAW,CAAE,QAAQ,CAAC,CAAC,UAAU,AACnC,CAAC,AAED,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAC1B,kBAAkB,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAC7C,mBAAmB,CAAE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CACvE,OAAO,IAAI,AACX,CAAC,AAGD,gBAAE,CAAE,IAAI,cAAC,CAAC,AACR,SAAS,CAAE,MAAM,CACjB,WAAW,MAAM,CACjB,OAAO,CAAC,CACR,QAAQ,KAAK,CACb,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,CACZ,UAAU,KAAK,AACjB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,KAAK,CAChB,MAAM,IAAI,CACV,UAAU,CAAE,UAAU,CACtB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,CAAC,cAAC,CAAC,AACD,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,SAAS,AAC5B,CAAC,AAED,OAAO,cAAC,CAAC,AACP,SAAS,CAAE,MAAM,AACnB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,GAAG,CAChB,UAAU,CAAE,IAAI,AAChB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,KAAK,CAChB,QAAQ,CAAE,MAAM,CAChB,WAAW,GAAG,AAChB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,AAChB,CAAC;AChCD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CACjB,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,WAAW,IAAI,CACf,UAAU,MAAM,AAClB,CAAC,AAED,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,AACnB,CAAC,AAID,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,UAAU,AACxB,CAAC;ACxCD,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,CAAC,eAAC,CAAC,AACD,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,GAAG,CACd,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,qBAAM,CACN,KAAK,eAAC,CAAC,AACL,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,KAAK,AACf,CAAC,AAED,eAAe,eAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,kBAAkB,CAAE,GAAG,CACvB,mBAAmB,CAAE,eAAe,CACpC,GAAG,CAAE,GAAG,AACV,CAAC,AAED,OAAO,eAAC,CAAC,AACP,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,KAAK,AAChB,CAAC;ACrCD,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,WAAW,CAAE,GAAG,CAChB,MAAM,IAAI,AACZ,CAAC,AACD,MAAM,eAAC,CAAC,AACN,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,KAAK,CAClB,eAAe,CAAE,SAAS,AAC5B,CAAC,AACD,MAAM,eAAC,CAAC,AACN,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,KAAK,AACpB,CAAC;ACtBD,KAAK,4BAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,EAAE,4BAAC,CAAC,AACF,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,CAAC,CACN,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC/C,CAAC,AACD,mBAAK,CAAC,EAAE,CAAC,EAAE,cAAC,CAAC,AACX,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,mBAAK,CAAC,EAAE,CAAC,EAAE,cAAC,CAAC,AACX,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,CACvB,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,mBAAK,CAAC,gBAAE,WAAW,GAAG,CAAC,AAAC,CAAC,AACvB,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC,AACD,mBAAK,CAAC,gBAAE,MAAM,AAAC,CAAC,AACd,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,mBAAK,CAAC,EAAE,SAAS,cAAC,CAAC,AACjB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AACD,mBAAK,CAAC,gBAAE,CACR,mBAAK,CAAC,EAAE,cAAC,CAAC,AACR,OAAO,CAAE,MAAM,AACjB,CAAC"
}